(()=>{"use strict";(()=>{const e=document.querySelector("#searchInput"),t=document.querySelector("#btnSearch"),o=async e=>{try{let t=await(async e=>{try{const t=await fetch(e,{mode:"cors"}),o=await t.json();console.log(o);const n={};return n.name=o.name,n.country=o.sys.country,n.lat=o.coord.lat,n.lon=o.coord.lon,console.log("currentDataObj"),n}catch(e){console.log("error: "+e)}})(`https://api.openweathermap.org/data/2.5/weather?q=${e}&units=metric&APPID=107629179ef66f70931a8e42d89f5115`),o=await(async e=>{try{const t=await fetch(e,{mode:"cors"}),o=await t.json();console.log(o);const n={};return n.temp=o.current.temp,n.description=o.current.weather[0].description,n.iconCode=o.current.weather[0].icon,n.feelsLike=o.current.feels_like,n.humidity=o.current.humidity,n.windSpeed=o.current.wind_speed,n.daily=o.daily,n}catch(e){console.log("error: "+e)}})(`https://api.openweathermap.org/data/2.5/onecall?lat=${t.lat}&lon=${t.lon}&units=metric&appid=107629179ef66f70931a8e42d89f5115`);console.log(t),console.log(o)}catch(e){console.log("error: "+e)}};o("toronto"),t.addEventListener("click",(()=>{console.log(e.value),o(e.value)})),e.addEventListener("keypress",(function(t){"Enter"===t.key&&o(e.value)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWF0aGVyLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9zcmMvYXBpLmpzIl0sIm5hbWVzIjpbInNlYXJjaElucHV0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwic2VhcmNoQnRuIiwiZ2V0RGF0YSIsImFzeW5jIiwic2VhcmNoVmFsdWUiLCJjdXJyZW50RGF0YSIsInVybCIsInJlc3BvbnNlIiwiZmV0Y2giLCJtb2RlIiwianNvbiIsImNvbnNvbGUiLCJsb2ciLCJjdXJyZW50RGF0YU9iaiIsIm5hbWUiLCJjb3VudHJ5Iiwic3lzIiwibGF0IiwiY29vcmQiLCJsb24iLCJlcnJvciIsImN1cnJlbnRXZWF0aGVyQVBJIiwib25lQ2FsbERhdGEiLCJvbmVDYWxsRGF0YU9iaiIsInRlbXAiLCJjdXJyZW50IiwiZGVzY3JpcHRpb24iLCJ3ZWF0aGVyIiwiaWNvbkNvZGUiLCJpY29uIiwiZmVlbHNMaWtlIiwiZmVlbHNfbGlrZSIsImh1bWlkaXR5Iiwid2luZFNwZWVkIiwid2luZF9zcGVlZCIsImRhaWx5Iiwib25lQ2FsbEFQSSIsImFkZEV2ZW50TGlzdGVuZXIiLCJ2YWx1ZSIsImUiLCJrZXkiXSwibWFwcGluZ3MiOiJtQkFFdUIsTUFFbkIsTUFBTUEsRUFBY0MsU0FBU0MsY0FBYyxnQkFDckNDLEVBQVlGLFNBQVNDLGNBQWMsY0FFbkNFLEVBQVVDLE1BQU9DLElBQ25CLElBQ0ksSUFBSUMsT0NUVUYsT0FBT0csSUFDN0IsSUFDSSxNQUFNQyxRQUFpQkMsTUFBTUYsRUFBSyxDQUFDRyxLQUFNLFNBQ25DSixRQUFvQkUsRUFBU0csT0FDbkNDLFFBQVFDLElBQUlQLEdBQ1osTUFBTVEsRUFBaUIsR0FNdkIsT0FMQUEsRUFBZUMsS0FBT1QsRUFBWVMsS0FDbENELEVBQWVFLFFBQVVWLEVBQVlXLElBQUlELFFBQ3pDRixFQUFlSSxJQUFNWixFQUFZYSxNQUFNRCxJQUN2Q0osRUFBZU0sSUFBTWQsRUFBWWEsTUFBTUMsSUFDdkNSLFFBQVFDLElBQUksa0JBQ0xDLEVBQ1QsTUFBT08sR0FDTFQsUUFBUUMsSUFBSSxVQUFVUSxLREpNQyxDQUFrQixxREFBcURqQix5REFDM0ZrQixPQ1FHbkIsT0FBT0csSUFDdEIsSUFDSSxNQUFNQyxRQUFpQkMsTUFBTUYsRUFBSyxDQUFDRyxLQUFNLFNBQ25DYSxRQUFvQmYsRUFBU0csT0FDbkNDLFFBQVFDLElBQUlVLEdBQ1osTUFBTUMsRUFBaUIsR0FTdkIsT0FSQUEsRUFBZUMsS0FBT0YsRUFBWUcsUUFBUUQsS0FDMUNELEVBQWVHLFlBQWNKLEVBQVlHLFFBQVFFLFFBQVEsR0FBR0QsWUFDNURILEVBQWVLLFNBQVdOLEVBQVlHLFFBQVFFLFFBQVEsR0FBR0UsS0FDekROLEVBQWVPLFVBQVlSLEVBQVlHLFFBQVFNLFdBQy9DUixFQUFlUyxTQUFXVixFQUFZRyxRQUFRTyxTQUM5Q1QsRUFBZVUsVUFBWVgsRUFBWUcsUUFBUVMsV0FFL0NYLEVBQWVZLE1BQVFiLEVBQVlhLE1BQzVCWixFQUNWLE1BQU9ILEdBQ0pULFFBQVFDLElBQUksVUFBVVEsS0R4Qk1nQixDQUFXLHVEQUF1RC9CLEVBQVlZLFdBQVdaLEVBQVljLDJEQUM3SFIsUUFBUUMsSUFBSVAsR0FDWk0sUUFBUUMsSUFBSVUsR0FDZCxNQUFPRixHQUNMVCxRQUFRQyxJQUFJLFVBQVVRLEtBUTFCbEIsRUFBUSxXQUtaRCxFQUFVb0MsaUJBQWlCLFNBQVMsS0FDaEMxQixRQUFRQyxJQUFJZCxFQUFZd0MsT0FDeEJwQyxFQUFRSixFQUFZd0MsVUFHeEJ4QyxFQUFZdUMsaUJBQWlCLFlBQVksU0FBVUUsR0FDbEMsVUFBVEEsRUFBRUMsS0FDRnRDLEVBQVFKLEVBQVl3QyxXQWhDVCxJIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2N1cnJlbnRXZWF0aGVyQVBJLCBvbmVDYWxsQVBJIH0gZnJvbSAnLi9hcGkuanMnO1xuXG5jb25zdCBzaXRlQ29udHJvbGxlciA9ICgoKT0+e1xuICAgIGxldCB1bml0cyA9ICdtZXRyaWMnO1xuICAgIGNvbnN0IHNlYXJjaElucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3NlYXJjaElucHV0Jyk7XG4gICAgY29uc3Qgc2VhcmNoQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2J0blNlYXJjaCcpO1xuXG4gICAgY29uc3QgZ2V0RGF0YSA9IGFzeW5jIChzZWFyY2hWYWx1ZSkgPT57XG4gICAgICAgIHRyeXtcbiAgICAgICAgICAgIGxldCBjdXJyZW50RGF0YSA9IGF3YWl0IGN1cnJlbnRXZWF0aGVyQVBJKGBodHRwczovL2FwaS5vcGVud2VhdGhlcm1hcC5vcmcvZGF0YS8yLjUvd2VhdGhlcj9xPSR7c2VhcmNoVmFsdWV9JnVuaXRzPSR7dW5pdHN9JkFQUElEPTEwNzYyOTE3OWVmNjZmNzA5MzFhOGU0MmQ4OWY1MTE1YCk7XG4gICAgICAgICAgICBsZXQgb25lQ2FsbERhdGEgPSBhd2FpdCBvbmVDYWxsQVBJKGBodHRwczovL2FwaS5vcGVud2VhdGhlcm1hcC5vcmcvZGF0YS8yLjUvb25lY2FsbD9sYXQ9JHtjdXJyZW50RGF0YS5sYXR9Jmxvbj0ke2N1cnJlbnREYXRhLmxvbn0mdW5pdHM9JHt1bml0c30mYXBwaWQ9MTA3NjI5MTc5ZWY2NmY3MDkzMWE4ZTQyZDg5ZjUxMTVgKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGN1cnJlbnREYXRhKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKG9uZUNhbGxEYXRhKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3Ipe1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2Vycm9yOiAnK2Vycm9yKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG5cbiAgICAvLyBpbml0aWFsaXplIHNpdGUgd2l0aCAndG9yb250bycgYXMgYmFzZSBjaXR5XG5cbiAgICBjb25zdCBzaXRlSW5pdCA9ICgoKT0+e1xuICAgICAgICBnZXREYXRhKCd0b3JvbnRvJyk7XG4gICAgfSkoKTtcbiAgICBcbiAgICAvLyBzZWFyY2ggYmFyIGV2ZW50IGxpc3RlbmVyc1xuXG4gICAgc2VhcmNoQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCk9PntcbiAgICAgICAgY29uc29sZS5sb2coc2VhcmNoSW5wdXQudmFsdWUpOyAgXG4gICAgICAgIGdldERhdGEoc2VhcmNoSW5wdXQudmFsdWUpOyAgICAgIFxuICAgIH0pO1xuXG4gICAgc2VhcmNoSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcigna2V5cHJlc3MnLCBmdW5jdGlvbiAoZSl7XG4gICAgICAgIGlmIChlLmtleSA9PT0nRW50ZXInKXtcbiAgICAgICAgICAgIGdldERhdGEoc2VhcmNoSW5wdXQudmFsdWUpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbn0pKCk7XG5cbiIsImNvbnN0IGN1cnJlbnRXZWF0aGVyQVBJID0gYXN5bmMgKHVybCkgPT4ge1xuICAgIHRyeXtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIHttb2RlOiAnY29ycyd9KTtcbiAgICAgICAgY29uc3QgY3VycmVudERhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgIGNvbnNvbGUubG9nKGN1cnJlbnREYXRhKTtcbiAgICAgICAgY29uc3QgY3VycmVudERhdGFPYmogPSB7fTtcbiAgICAgICAgY3VycmVudERhdGFPYmoubmFtZSA9IGN1cnJlbnREYXRhLm5hbWU7XG4gICAgICAgIGN1cnJlbnREYXRhT2JqLmNvdW50cnkgPSBjdXJyZW50RGF0YS5zeXMuY291bnRyeTtcbiAgICAgICAgY3VycmVudERhdGFPYmoubGF0ID0gY3VycmVudERhdGEuY29vcmQubGF0O1xuICAgICAgICBjdXJyZW50RGF0YU9iai5sb24gPSBjdXJyZW50RGF0YS5jb29yZC5sb247XG4gICAgICAgIGNvbnNvbGUubG9nKCdjdXJyZW50RGF0YU9iaicpO1xuICAgICAgICByZXR1cm4gY3VycmVudERhdGFPYmo7XG4gICAgfSBjYXRjaCAoZXJyb3Ipe1xuICAgICAgICBjb25zb2xlLmxvZygnZXJyb3I6ICcrZXJyb3IpO1xuICAgICAgICAvLyBzaG93IGVycm9yIG1lc3NhZ2Ugb25cbiAgICB9XG59XG5cbmNvbnN0IG9uZUNhbGxBUEkgPSBhc3luYyAodXJsKSA9PntcbiAgICB0cnl7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsLCB7bW9kZTogJ2NvcnMnfSk7XG4gICAgICAgIGNvbnN0IG9uZUNhbGxEYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgICBjb25zb2xlLmxvZyhvbmVDYWxsRGF0YSk7XG4gICAgICAgIGNvbnN0IG9uZUNhbGxEYXRhT2JqID0ge307XG4gICAgICAgIG9uZUNhbGxEYXRhT2JqLnRlbXAgPSBvbmVDYWxsRGF0YS5jdXJyZW50LnRlbXA7XG4gICAgICAgIG9uZUNhbGxEYXRhT2JqLmRlc2NyaXB0aW9uID0gb25lQ2FsbERhdGEuY3VycmVudC53ZWF0aGVyWzBdLmRlc2NyaXB0aW9uO1xuICAgICAgICBvbmVDYWxsRGF0YU9iai5pY29uQ29kZSA9IG9uZUNhbGxEYXRhLmN1cnJlbnQud2VhdGhlclswXS5pY29uO1xuICAgICAgICBvbmVDYWxsRGF0YU9iai5mZWVsc0xpa2UgPSBvbmVDYWxsRGF0YS5jdXJyZW50LmZlZWxzX2xpa2U7XG4gICAgICAgIG9uZUNhbGxEYXRhT2JqLmh1bWlkaXR5ID0gb25lQ2FsbERhdGEuY3VycmVudC5odW1pZGl0eTtcbiAgICAgICAgb25lQ2FsbERhdGFPYmoud2luZFNwZWVkID0gb25lQ2FsbERhdGEuY3VycmVudC53aW5kX3NwZWVkO1xuICAgICAgICAvLyByZW1lbWJlciB0byBpbmNsdWRlIHZhbHVlcyBmb3IgZGFpbHkgc3R1ZmZcbiAgICAgICAgb25lQ2FsbERhdGFPYmouZGFpbHkgPSBvbmVDYWxsRGF0YS5kYWlseTtcbiAgICAgICAgcmV0dXJuIG9uZUNhbGxEYXRhT2JqO1xuICAgIH1jYXRjaCAoZXJyb3Ipe1xuICAgICAgICBjb25zb2xlLmxvZygnZXJyb3I6ICcrZXJyb3IpO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgY3VycmVudFdlYXRoZXJBUEksIG9uZUNhbGxBUEl9Il0sInNvdXJjZVJvb3QiOiIifQ==