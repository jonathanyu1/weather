(()=>{"use strict";(()=>{let e="metric",t="toronto";const o=document.querySelector("#searchInput"),n=document.querySelector("#btnSearch"),r=document.querySelector("#btnChangeUnit"),c=document.querySelector("#errorInput"),i=async o=>{try{let n=await(async e=>{try{const t=await fetch(e,{mode:"cors"}),o=await t.json();console.log(o);const n={};return n.city=o.name,n.country=o.sys.country,n.lat=o.coord.lat,n.lon=o.coord.lon,console.log("currentDataObj"),n}catch(e){console.log("error: "+e)}})(`https://api.openweathermap.org/data/2.5/weather?q=${o}&units=${e}&APPID=107629179ef66f70931a8e42d89f5115`),r=await(async e=>{try{const t=await fetch(e,{mode:"cors"}),o=await t.json();console.log(o);const n={};return n.temp=o.current.temp,n.description=o.current.weather[0].description,n.iconCode=o.current.weather[0].icon,n.feelsLike=o.current.feels_like,n.humidity=o.current.humidity,n.windSpeed=o.current.wind_speed,n.daily=o.daily,n.daily.shift(),n}catch(e){console.log("error: "+e)}})(`https://api.openweathermap.org/data/2.5/onecall?lat=${n.lat}&lon=${n.lon}&units=${e}&appid=107629179ef66f70931a8e42d89f5115`);console.log(n),console.log(r),r.city=n.city,r.country=n.country,console.log(r),t=n.city,((e,t)=>{let o="",n="";"metric"==t?(o="°C",n="km/h"):"imperial"==t&&(o="°F",n="mph");const r=document.querySelector("#weatherLocation"),c=document.querySelector("#weatherDescription"),i=document.querySelector("#weatherTemp"),a=document.querySelector("#weatherIcon");var l;r.innerHTML=`${e.city}, ${e.country}`,c.innerHTML=`${l=e.description,l.replace(/(^\w{1})|(\s+\w{1})/g,(e=>e.toUpperCase()))}`,i.innerHTML=`${Math.round(e.temp)} ${o}`,a.src=`http://openweathermap.org/img/wn/${e.iconCode}@4x.png`;const d=document.querySelector("#feelsLikeTemp"),u=document.querySelector("#humidityTemp"),s=document.querySelector("#windSpeedTemp");d.innerHTML=`${Math.round(e.feelsLike)} ${o}`,u.innerHTML=`${e.humidity}%`,s.innerHTML=`${Math.round(10*e.windSpeed)/10} ${n}`;const y=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];e.daily.forEach(((e,t)=>{console.log(e),console.log(t),console.log(e.dt);let n=new Date(1e3*e.dt),r=y[n.getDay()];console.log(r);const c=document.querySelector(`#day${t}Name`),i=document.querySelector(`#day${t}High`),a=document.querySelector(`#day${t}Low`),l=document.querySelector(`#day${t}Icon`);c.innerHTML=`${r}`,i.innerHTML=`${Math.round(e.temp.max)} ${o}`,a.innerHTML=`${Math.round(e.temp.min)} ${o}`,l.src=`http://openweathermap.org/img/wn/${e.weather[0].icon}@2x.png`}))})(r,e),c.style.visibility="hidden"}catch(e){console.log("error: "+e),c.style.visibility="visible"}};i("toronto"),n.addEventListener("click",(()=>{console.log(o.value),i(o.value),o.value=""})),o.addEventListener("keypress",(function(e){"Enter"===e.key&&(i(o.value),o.value="")})),r.addEventListener("click",(function(o){const n=document.querySelector("#metricLabel"),r=document.querySelector("#imperialLabel");"metric"==e?(e="imperial",n.style.fontWeight="normal",r.style.fontWeight="bold"):"imperial"==e&&(e="metric",n.style.fontWeight="bold",r.style.fontWeight="normal"),i(t)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,