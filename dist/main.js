(()=>{"use strict";(()=>{let e="metric",t="toronto";const r=document.querySelector("#searchInput"),n=document.querySelector("#btnSearch"),o=document.querySelector("#btnChangeUnit"),c=document.querySelector("#errorInput"),i=async r=>{try{let n=await(async e=>{try{const t=await fetch(e,{mode:"cors"}),r=await t.json(),n={};return n.city=r.name,n.country=r.sys.country,n.lat=r.coord.lat,n.lon=r.coord.lon,n}catch(e){console.log("error: "+e)}})(`https://api.openweathermap.org/data/2.5/weather?q=${r}&units=${e}&APPID=107629179ef66f70931a8e42d89f5115`),o=await(async e=>{try{const t=await fetch(e,{mode:"cors"}),r=await t.json(),n={};return n.temp=r.current.temp,n.description=r.current.weather[0].description,n.iconCode=r.current.weather[0].icon,n.feelsLike=r.current.feels_like,n.humidity=r.current.humidity,n.windSpeed=r.current.wind_speed,n.daily=r.daily,n.daily.shift(),n}catch(e){console.log("error: "+e)}})(`https://api.openweathermap.org/data/2.5/onecall?lat=${n.lat}&lon=${n.lon}&units=${e}&appid=107629179ef66f70931a8e42d89f5115`);o.city=n.city,o.country=n.country,t=n.city,((e,t)=>{let r="",n="";"metric"==t?(r="째C",n="km/h"):"imperial"==t&&(r="째F",n="mph");const o=document.querySelector("#weatherLocation"),c=document.querySelector("#weatherDescription"),i=document.querySelector("#weatherTemp"),a=document.querySelector("#weatherIcon");var d;o.innerHTML=`${e.city}, ${e.country}`,c.innerHTML=`${d=e.description,d.replace(/(^\w{1})|(\s+\w{1})/g,(e=>e.toUpperCase()))}`,i.innerHTML=`${Math.round(e.temp)} ${r}`,a.src=`http://openweathermap.org/img/wn/${e.iconCode}@4x.png`;const u=document.querySelector("#feelsLikeTemp"),l=document.querySelector("#humidityTemp"),y=document.querySelector("#windSpeedTemp");u.innerHTML=`${Math.round(e.feelsLike)} ${r}`,l.innerHTML=`${e.humidity}%`,"째C"==r?y.innerHTML=`${Math.round(3.6*e.windSpeed*10)/10} ${n}`:"째F"==r&&(y.innerHTML=`${Math.round(10*e.windSpeed)/10} ${n}`);const s=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];e.daily.forEach(((e,t)=>{let n=new Date(1e3*e.dt),o=s[n.getDay()];const c=document.querySelector(`#day${t}Name`),i=document.querySelector(`#day${t}High`),a=document.querySelector(`#day${t}Low`),d=document.querySelector(`#day${t}Icon`);c.innerHTML=`${o}`,i.innerHTML=`${Math.round(e.temp.max)} ${r}`,a.innerHTML=`${Math.round(e.temp.min)} ${r}`,d.src=`http://openweathermap.org/img/wn/${e.weather[0].icon}@2x.png`}))})(o,e),c.style.visibility="hidden"}catch(e){console.log("error: "+e),c.style.visibility="visible"}};i("toronto"),n.addEventListener("click",(()=>{i(r.value),r.value=""})),r.addEventListener("keypress",(function(e){"Enter"===e.key&&(i(r.value),r.value="")})),o.addEventListener("click",(function(r){const n=document.querySelector("#metricLabel"),o=document.querySelector("#imperialLabel");"metric"==e?(e="imperial",n.style.fontWeight="normal",o.style.fontWeight="1000"):"imperial"==e&&(e="metric",n.style.fontWeight="1000",o.style.fontWeight="normal"),i(t)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWF0aGVyLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9zcmMvYXBpLmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9zcmMvZG9tLmpzIl0sIm5hbWVzIjpbInVuaXRzIiwiY3VyckNpdHkiLCJzZWFyY2hJbnB1dCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInNlYXJjaEJ0biIsImJ0bkNoYW5nZVVuaXQiLCJlcnJvcklucHV0IiwiZ2V0RGF0YSIsImFzeW5jIiwic2VhcmNoVmFsdWUiLCJjdXJyZW50RGF0YSIsInVybCIsInJlc3BvbnNlIiwiZmV0Y2giLCJtb2RlIiwianNvbiIsImN1cnJlbnREYXRhT2JqIiwiY2l0eSIsIm5hbWUiLCJjb3VudHJ5Iiwic3lzIiwibGF0IiwiY29vcmQiLCJsb24iLCJlcnJvciIsImNvbnNvbGUiLCJsb2ciLCJjdXJyZW50V2VhdGhlckFQSSIsIm9uZUNhbGxEYXRhIiwib25lQ2FsbERhdGFPYmoiLCJ0ZW1wIiwiY3VycmVudCIsImRlc2NyaXB0aW9uIiwid2VhdGhlciIsImljb25Db2RlIiwiaWNvbiIsImZlZWxzTGlrZSIsImZlZWxzX2xpa2UiLCJodW1pZGl0eSIsIndpbmRTcGVlZCIsIndpbmRfc3BlZWQiLCJkYWlseSIsInNoaWZ0Iiwib25lQ2FsbEFQSSIsIndlYXRoZXJPYmoiLCJkZWdyZWVzIiwic3BlZWQiLCJ3ZWF0aGVyTG9jYXRpb24iLCJ3ZWF0aGVyRGVzY3JpcHRpb24iLCJ3ZWF0aGVyVGVtcCIsIndlYXRoZXJJY29uIiwic3RyaW5nIiwiaW5uZXJIVE1MIiwicmVwbGFjZSIsImxldHRlciIsInRvVXBwZXJDYXNlIiwiTWF0aCIsInJvdW5kIiwic3JjIiwiZmVlbHNMaWtlVGVtcCIsImh1bWlkaXR5VGVtcCIsIndpbmRTcGVlZFRlbXAiLCJhbGxEYXlzIiwiZm9yRWFjaCIsImRheSIsImluZGV4IiwiZGF0ZVRpbWUiLCJEYXRlIiwiZHQiLCJjb252RGF5TmFtZSIsImdldERheSIsImRheU5hbWUiLCJkYXlIaWdoIiwiZGF5TG93IiwiZGF5SWNvbiIsIm1heCIsIm1pbiIsImxvYWRXZWF0aGVyRGF0YSIsInN0eWxlIiwidmlzaWJpbGl0eSIsImFkZEV2ZW50TGlzdGVuZXIiLCJ2YWx1ZSIsImUiLCJrZXkiLCJtZXRyaWNMYWJlbCIsImltcGVyaWFsTGFiZWwiLCJmb250V2VpZ2h0Il0sIm1hcHBpbmdzIjoibUJBSXVCLE1BQ25CLElBQUlBLEVBQVEsU0FDUkMsRUFBVyxVQUNmLE1BQU1DLEVBQWNDLFNBQVNDLGNBQWMsZ0JBQ3JDQyxFQUFZRixTQUFTQyxjQUFjLGNBQ25DRSxFQUFnQkgsU0FBU0MsY0FBYyxrQkFDdkNHLEVBQWFKLFNBQVNDLGNBQWMsZUFFcENJLEVBQVVDLE1BQU9DLElBQ25CLElBQ0ksSUFBSUMsT0NkVUYsT0FBT0csSUFDN0IsSUFDSSxNQUFNQyxRQUFpQkMsTUFBTUYsRUFBSyxDQUFDRyxLQUFNLFNBQ25DSixRQUFvQkUsRUFBU0csT0FDN0JDLEVBQWlCLEdBS3ZCLE9BSkFBLEVBQWVDLEtBQU9QLEVBQVlRLEtBQ2xDRixFQUFlRyxRQUFVVCxFQUFZVSxJQUFJRCxRQUN6Q0gsRUFBZUssSUFBTVgsRUFBWVksTUFBTUQsSUFDdkNMLEVBQWVPLElBQU1iLEVBQVlZLE1BQU1DLElBQ2hDUCxFQUNULE1BQU9RLEdBQ0xDLFFBQVFDLElBQUksVUFBVUYsS0RHTUcsQ0FBa0IscURBQXFEbEIsV0FBcUJWLDRDQUNoSDZCLE9DQ0dwQixPQUFPRyxJQUN0QixJQUNJLE1BQU1DLFFBQWlCQyxNQUFNRixFQUFLLENBQUNHLEtBQU0sU0FDbkNjLFFBQW9CaEIsRUFBU0csT0FDN0JjLEVBQWlCLEdBV3ZCLE9BVkFBLEVBQWVDLEtBQU9GLEVBQVlHLFFBQVFELEtBQzFDRCxFQUFlRyxZQUFjSixFQUFZRyxRQUFRRSxRQUFRLEdBQUdELFlBQzVESCxFQUFlSyxTQUFXTixFQUFZRyxRQUFRRSxRQUFRLEdBQUdFLEtBQ3pETixFQUFlTyxVQUFZUixFQUFZRyxR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QU0sT0FJMUI1RSxFQUFjMkUsaUJBQWlCLFNBQVMsU0FBU0UsR0FFN0MsTUFBTUUsRUFBY2xGLFNBQVNDLGNBQWMsZ0JBQ3JDa0YsRUFBZ0JuRixTQUFTQyxjQUFjLGtCQUNsQyxVQUFQSixHQUNBQSxFQUFRLFdBQ1JxRixFQUFZTixNQUFNUSxXQUFXLFNBQzdCRCxFQUFjUCxNQUFNUSxXQUFXLFFBQ2pCLFlBQVB2RixJQUNQQSxFQUFRLFNBQ1JxRixFQUFZTixNQUFNUSxXQUFXLE9BQzdCRCxFQUFjUCxNQUFNUSxXQUFXLFVBR25DL0UsRUFBUVAsT0EzRE8sSSIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtjdXJyZW50V2VhdGhlckFQSSwgb25lQ2FsbEFQSSB9IGZyb20gJy4vYXBpLmpzJztcbmltcG9ydCB7bG9hZFdlYXRoZXJEYXRhfSBmcm9tICcuL2RvbS5qcyc7XG5cblxuY29uc3Qgc2l0ZUNvbnRyb2xsZXIgPSAoKCk9PntcbiAgICBsZXQgdW5pdHMgPSAnbWV0cmljJztcbiAgICBsZXQgY3VyckNpdHkgPSAndG9yb250byc7XG4gICAgY29uc3Qgc2VhcmNoSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc2VhcmNoSW5wdXQnKTtcbiAgICBjb25zdCBzZWFyY2hCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYnRuU2VhcmNoJyk7XG4gICAgY29uc3QgYnRuQ2hhbmdlVW5pdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNidG5DaGFuZ2VVbml0Jyk7XG4gICAgY29uc3QgZXJyb3JJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNlcnJvcklucHV0Jyk7XG5cbiAgICBjb25zdCBnZXREYXRhID0gYXN5bmMgKHNlYXJjaFZhbHVlKSA9PntcbiAgICAgICAgdHJ5e1xuICAgICAgICAgICAgbGV0IGN1cnJlbnREYXRhID0gYXdhaXQgY3VycmVudFdlYXRoZXJBUEkoYGh0dHBzOi8vYXBpLm9wZW53ZWF0aGVybWFwLm9yZy9kYXRhLzIuNS93ZWF0aGVyP3E9JHtzZWFyY2hWYWx1ZX0mdW5pdHM9JHt1bml0c30mQVBQSUQ9MTA3NjI5MTc5ZWY2NmY3MDkzMWE4ZTQyZDg5ZjUxMTVgKTtcbiAgICAgICAgICAgIGxldCBvbmVDYWxsRGF0YSA9IGF3YWl0IG9uZUNhbGxBUEkoYGh0dHBzOi8vYXBpLm9wZW53ZWF0aGVybWFwLm9yZy9kYXRhLzIuNS9vbmVjYWxsP2xhdD0ke2N1cnJlbnREYXRhLmxhdH0mbG9uPSR7Y3VycmVudERhdGEubG9ufSZ1bml0cz0ke3VuaXRzfSZhcHBpZD0xMDc2MjkxNzllZjY2ZjcwOTMxYThlNDJkODlmNTExNWApO1xuICAgICAgICAgICAgb25lQ2FsbERhdGEuY2l0eSA9IGN1cnJlbnREYXRhLmNpdHk7XG4gICAgICAgICAgICBvbmVDYWxsRGF0YS5jb3VudHJ5ID0gY3VycmVudERhdGEuY291bnRyeTtcbiAgICAgICAgICAgIGN1cnJDaXR5ID0gY3VycmVudERhdGEuY2l0eTtcbiAgICAgICAgICAgIGxvYWRXZWF0aGVyRGF0YShvbmVDYWxsRGF0YSwgdW5pdHMpO1xuICAgICAgICAgICAgZXJyb3JJbnB1dC5zdHlsZS52aXNpYmlsaXR5PSdoaWRkZW4nO1xuICAgICAgICB9IGNhdGNoIChlcnJvcil7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnZXJyb3I6ICcrZXJyb3IpO1xuICAgICAgICAgICAgZXJyb3JJbnB1dC5zdHlsZS52aXNpYmlsaXR5PSd2aXNpYmxlJztcbiAgICAgICAgICAgIC8vIGFkZCBlcnJvciBtZXNzYWdlIHVuZGVyIHNlYXJjaCBiYXJcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG5cbiAgICAvLyBpbml0aWFsaXplIHNpdGUgd2l0aCAndG9yb250bycgYXMgYmFzZSBjaXR5XG5cbiAgICBjb25zdCBzaXRlSW5pdCA9ICgoKT0+e1xuICAgICAgICBnZXREYXRhKCd0b3JvbnRvJyk7XG4gICAgfSkoKTtcbiAgICBcbiAgICAvLyBzZWFyY2ggYmFyIGV2ZW50IGxpc3RlbmVyc1xuXG4gICAgc2VhcmNoQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCk9PntcbiAgICAgICAgZ2V0RGF0YShzZWFyY2hJbnB1dC52YWx1ZSk7XG4gICAgICAgIHNlYXJjaElucHV0LnZhbHVlPScnO1xuICAgIH0pO1xuXG4gICAgc2VhcmNoSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcigna2V5cHJlc3MnLCBmdW5jdGlvbiAoZSl7XG4gICAgICAgIGlmIChlLmtleSA9PT0nRW50ZXInKXtcbiAgICAgICAgICAgIGdldERhdGEoc2VhcmNoSW5wdXQudmFsdWUpO1xuICAgICAgICAgICAgc2VhcmNoSW5wdXQudmFsdWU9Jyc7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGJ0bkNoYW5nZVVuaXQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihlKXtcbiAgICAgICAgLy8gY2hhbmdlIHRvIG9wcG9zaXRlIHVuaXRcbiAgICAgICAgY29uc3QgbWV0cmljTGFiZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbWV0cmljTGFiZWwnKTtcbiAgICAgICAgY29uc3QgaW1wZXJpYWxMYWJlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNpbXBlcmlhbExhYmVsJyk7XG4gICAgICAgIGlmICh1bml0cz09J21ldHJpYycpe1xuICAgICAgICAgICAgdW5pdHMgPSAnaW1wZXJpYWwnO1xuICAgICAgICAgICAgbWV0cmljTGFiZWwuc3R5bGUuZm9udFdlaWdodD0nbm9ybWFsJztcbiAgICAgICAgICAgIGltcGVyaWFsTGFiZWwuc3R5bGUuZm9udFdlaWdodD0nMTAwMCc7XG4gICAgICAgIH0gZWxzZSBpZiAodW5pdHM9PSdpbXBlcmlhbCcpe1xuICAgICAgICAgICAgdW5pdHMgPSAnbWV0cmljJztcbiAgICAgICAgICAgIG1ldHJpY0xhYmVsLnN0eWxlLmZvbnRXZWlnaHQ9JzEwMDAnO1xuICAgICAgICAgICAgaW1wZXJpYWxMYWJlbC5zdHlsZS5mb250V2VpZ2h0PSdub3JtYWwnO1xuICAgICAgICB9XG4gICAgICAgIC8vIGNhbGwgZ2V0RGF0YSB1c2luZyBjdXJyQ2l0eSB0byByZS1kaXNwbGF5IGluIG5ldyB1bml0c1xuICAgICAgICBnZXREYXRhKGN1cnJDaXR5KTtcbiAgICB9KTtcblxufSkoKTtcblxuIiwiY29uc3QgY3VycmVudFdlYXRoZXJBUEkgPSBhc3luYyAodXJsKSA9PiB7XG4gICAgdHJ5e1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwge21vZGU6ICdjb3JzJ30pO1xuICAgICAgICBjb25zdCBjdXJyZW50RGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgY29uc3QgY3VycmVudERhdGFPYmogPSB7fTtcbiAgICAgICAgY3VycmVudERhdGFPYmouY2l0eSA9IGN1cnJlbnREYXRhLm5hbWU7XG4gICAgICAgIGN1cnJlbnREYXRhT2JqLmNvdW50cnkgPSBjdXJyZW50RGF0YS5zeXMuY291bnRyeTtcbiAgICAgICAgY3VycmVudERhdGFPYmoubGF0ID0gY3VycmVudERhdGEuY29vcmQubGF0O1xuICAgICAgICBjdXJyZW50RGF0YU9iai5sb24gPSBjdXJyZW50RGF0YS5jb29yZC5sb247XG4gICAgICAgIHJldHVybiBjdXJyZW50RGF0YU9iajtcbiAgICB9IGNhdGNoIChlcnJvcil7XG4gICAgICAgIGNvbnNvbGUubG9nKCdlcnJvcjogJytlcnJvcik7XG4gICAgICAgIC8vIHNob3cgZXJyb3IgbWVzc2FnZSBvblxuICAgIH1cbn1cblxuY29uc3Qgb25lQ2FsbEFQSSA9IGFzeW5jICh1cmwpID0+e1xuICAgIHRyeXtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIHttb2RlOiAnY29ycyd9KTtcbiAgICAgICAgY29uc3Qgb25lQ2FsbERhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgIGNvbnN0IG9uZUNhbGxEYXRhT2JqID0ge307XG4gICAgICAgIG9uZUNhbGxEYXRhT2JqLnRlbXAgPSBvbmVDYWxsRGF0YS5jdXJyZW50LnRlbXA7XG4gICAgICAgIG9uZUNhbGxEYXRhT2JqLmRlc2NyaXB0aW9uID0gb25lQ2FsbERhdGEuY3VycmVudC53ZWF0aGVyWzBdLmRlc2NyaXB0aW9uO1xuICAgICAgICBvbmVDYWxsRGF0YU9iai5pY29uQ29kZSA9IG9uZUNhbGxEYXRhLmN1cnJlbnQud2VhdGhlclswXS5pY29uO1xuICAgICAgICBvbmVDYWxsRGF0YU9iai5mZWVsc0xpa2UgPSBvbmVDYWxsRGF0YS5jdXJyZW50LmZlZWxzX2xpa2U7XG4gICAgICAgIG9uZUNhbGxEYXRhT2JqLmh1bWlkaXR5ID0gb25lQ2FsbERhdGEuY3VycmVudC5odW1pZGl0eTtcbiAgICAgICAgb25lQ2FsbERhdGFPYmoud2luZFNwZWVkID0gb25lQ2FsbERhdGEuY3VycmVudC53aW5kX3NwZWVkO1xuICAgICAgICAvLyByZW1lbWJlciB0byBpbmNsdWRlIHZhbHVlcyBmb3IgZGFpbHkgc3R1ZmZcbiAgICAgICAgb25lQ2FsbERhdGFPYmouZGFpbHkgPSBvbmVDYWxsRGF0YS5kYWlseTtcbiAgICAgICAgLy8gcmVtb3ZlcyB0aGUgZmlyc3QgZGF5IGZyb20gZGFpbHksIHdoaWNoIGlzIHRvZGF5J3Mgd2VhdGhlclxuICAgICAgICBvbmVDYWxsRGF0YU9iai5kYWlseS5zaGlmdCgpO1xuICAgICAgICByZXR1cm4gb25lQ2FsbERhdGFPYmo7XG4gICAgfWNhdGNoIChlcnJvcil7XG4gICAgICAgIGNvbnNvbGUubG9nKCdlcnJvcjogJytlcnJvcik7XG4gICAgfVxufVxuXG5leHBvcnQgeyBjdXJyZW50V2VhdGhlckFQSSwgb25lQ2FsbEFQSX0iLCJjb25zdCBjYXBpdGFsaXplU3RyID0gKHN0cmluZykgPT4ge1xuICAgIC8vIHNvbHV0aW9uOiBodHRwczovL3d3dy5mcmVlY29kZWNhbXAub3JnL25ld3MvaG93LXRvLWNhcGl0YWxpemUtd29yZHMtaW4tamF2YXNjcmlwdC9cbiAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoLyheXFx3ezF9KXwoXFxzK1xcd3sxfSkvZywgbGV0dGVyID0+IGxldHRlci50b1VwcGVyQ2FzZSgpKTtcbn1cblxuY29uc3QgbG9hZFdlYXRoZXJEYXRhID0gKHdlYXRoZXJPYmosIHVuaXRzKSA9PntcbiAgICBsZXQgZGVncmVlcyA9Jyc7XG4gICAgbGV0IHNwZWVkID0gJyc7XG4gICAgaWYgKHVuaXRzID09J21ldHJpYycpe1xuICAgICAgICBkZWdyZWVzPSfCsEMnO1xuICAgICAgICBzcGVlZD0na20vaCc7XG4gICAgfSBlbHNlIGlmICh1bml0cyA9PSdpbXBlcmlhbCcpe1xuICAgICAgICBkZWdyZWVzPSfCsEYnO1xuICAgICAgICBzcGVlZD0nbXBoJztcbiAgICB9XG5cbiAgICAvLyBDdXJyIFdlYXRoZXI6IGxlZnQgc2lkZVxuICAgIGNvbnN0IHdlYXRoZXJMb2NhdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN3ZWF0aGVyTG9jYXRpb24nKTtcbiAgICBjb25zdCB3ZWF0aGVyRGVzY3JpcHRpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjd2VhdGhlckRlc2NyaXB0aW9uJyk7XG4gICAgY29uc3Qgd2VhdGhlclRlbXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjd2VhdGhlclRlbXAnKTtcbiAgICBjb25zdCB3ZWF0aGVySWNvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN3ZWF0aGVySWNvbicpO1xuICAgIFxuICAgIHdlYXRoZXJMb2NhdGlvbi5pbm5lckhUTUwgPSBgJHt3ZWF0aGVyT2JqLmNpdHl9LCAke3dlYXRoZXJPYmouY291bnRyeX1gO1xuICAgIHdlYXRoZXJEZXNjcmlwdGlvbi5pbm5lckhUTUwgPSBgJHtjYXBpdGFsaXplU3RyKHdlYXRoZXJPYmouZGVzY3JpcHRpb24pfWA7XG4gICAgd2VhdGhlclRlbXAuaW5uZXJIVE1MID0gYCR7TWF0aC5yb3VuZCh3ZWF0aGVyT2JqLnRlbXApfSAke2RlZ3JlZXN9YDtcbiAgICB3ZWF0aGVySWNvbi5zcmMgPSBgaHR0cDovL29wZW53ZWF0aGVybWFwLm9yZy9pbWcvd24vJHt3ZWF0aGVyT2JqLmljb25Db2RlfUA0eC5wbmdgO1xuICAgIFxuICAgIC8vIEN1cnIgV2VhdGhlcjogcmlnaHQgc2lkZVxuICAgIGNvbnN0IGZlZWxzTGlrZVRlbXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZmVlbHNMaWtlVGVtcCcpO1xuICAgIGNvbnN0IGh1bWlkaXR5VGVtcCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNodW1pZGl0eVRlbXAnKTtcbiAgICBjb25zdCB3aW5kU3BlZWRUZW1wID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3dpbmRTcGVlZFRlbXAnKTtcbiAgICBmZWVsc0xpa2VUZW1wLmlubmVySFRNTCA9IGAke01hdGgucm91bmQod2VhdGhlck9iai5mZWVsc0xpa2UpfSAke2RlZ3JlZXN9YDtcbiAgICBodW1pZGl0eVRlbXAuaW5uZXJIVE1MID0gYCR7d2VhdGhlck9iai5odW1pZGl0eX0lYDtcbiAgICAvLyB3aW5kU3BlZWRUZW1wLmlubmVySFRNTCA9IGAke01hdGgucm91bmQod2VhdGhlck9iai53aW5kU3BlZWQgKiAxMCkgLyAxMH0gJHtzcGVlZH1gO1xuICAgIGlmIChkZWdyZWVzPT0nwrBDJyl7XG4gICAgICAgIC8vIHVuaXQgaXMgaW4gbS9zLCBuZWVkIHRvIG11bHRpcGx5IGJ5IDMuNiB0byBnZXQga20vaFxuICAgICAgICB3aW5kU3BlZWRUZW1wLmlubmVySFRNTD1gJHtNYXRoLnJvdW5kKHdlYXRoZXJPYmoud2luZFNwZWVkKjMuNiogMTApIC8gMTB9ICR7c3BlZWR9YDtcbiAgICB9IGVsc2UgaWYgKGRlZ3JlZXM9PSfCsEYnKXtcbiAgICAgICAgd2luZFNwZWVkVGVtcC5pbm5lckhUTUwgPSBgJHtNYXRoLnJvdW5kKHdlYXRoZXJPYmoud2luZFNwZWVkICogMTApIC8gMTB9ICR7c3BlZWR9YDtcbiAgICB9XG4gICAgLy8gZGFpbHkgd2VhdGhlcjpcbiAgICAvLyBjb252ZXJ0IHRpbWVzdGFtcCB0byBkYXkgc29sdXRpb246IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS81NjA3MDkxNlxuICAgIGNvbnN0IGFsbERheXM9IFsnU3VuZGF5JywgJ01vbmRheScsICdUdWVzZGF5JywgJ1dlZG5lc2RheScsICdUaHVyc2RheScsICdGcmlkYXknLCAnU2F0dXJkYXknXTtcbiAgICB3ZWF0aGVyT2JqLmRhaWx5LmZvckVhY2goKGRheSxpbmRleCk9PntcbiAgICAgICAgbGV0IGRhdGVUaW1lID0gbmV3IERhdGUoZGF5LmR0KjEwMDApOyAvL2dldCBkYXRlVGltZVxuICAgICAgICBsZXQgY29udkRheU5hbWUgPSBhbGxEYXlzW2RhdGVUaW1lLmdldERheSgpXTtcblxuICAgICAgICBjb25zdCBkYXlOYW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgI2RheSR7aW5kZXh9TmFtZWApO1xuICAgICAgICBjb25zdCBkYXlIaWdoID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgI2RheSR7aW5kZXh9SGlnaGApO1xuICAgICAgICBjb25zdCBkYXlMb3cgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjZGF5JHtpbmRleH1Mb3dgKTtcbiAgICAgICAgY29uc3QgZGF5SWNvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCNkYXkke2luZGV4fUljb25gKTtcbiAgICAgICAgZGF5TmFtZS5pbm5lckhUTUwgPSBgJHtjb252RGF5TmFtZX1gO1xuICAgICAgICBkYXlIaWdoLmlubmVySFRNTCA9IGAke01hdGgucm91bmQoZGF5LnRlbXAubWF4KX0gJHtkZWdyZWVzfWA7XG4gICAgICAgIGRheUxvdy5pbm5lckhUTUwgPSBgJHtNYXRoLnJvdW5kKGRheS50ZW1wLm1pbil9ICR7ZGVncmVlc31gO1xuICAgICAgICBkYXlJY29uLnNyYyA9IGBodHRwOi8vb3BlbndlYXRoZXJtYXAub3JnL2ltZy93bi8ke2RheS53ZWF0aGVyWzBdLmljb259QDJ4LnBuZ2A7XG4gICAgfSk7XG59XG5cbmV4cG9ydCB7bG9hZFdlYXRoZXJEYXRhfSJdLCJzb3VyY2VSb290IjoiIn0=